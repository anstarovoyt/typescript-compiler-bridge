/// <reference path="typescriptServices.d.ts"/>


declare var Java;

module ts1 {

    var utils = Java.type("an.samples.utils.Util");

    /**
     *
     * DO NOT CHANGE *.JS FILE! THE FILE IS AUTOGENERATED
     *
     */
    export function compileFile(path:string, baseDir:string) {
        var options = ts.getDefaultCompilerOptions();

        var arr = [];
        arr[0] = path;

        utils.log("before create");
        var createdHost = createCompilerHost(options, baseDir);
        utils.log("creatd Host");
        var program:ts.Program = ts.createProgram(arr, options, createdHost);
        var typeChecker = program.getTypeChecker(true);
        typeChecker.emitFiles();

    }

    function readFileText(filename:string):string {
        return utils.readFileText(filename);
    }

    function writeFileText(fileName:string, data:string):void {
        utils.writeFile(fileName, data);
    }

    function createCompilerHost(options:ts.CompilerOptions, currentDir:string):ts.CompilerHost {

        function getCanonicalFileName(fileName:string):string {
            return fileName.toLowerCase();
        }

        function getSourceFile(filename:string, languageVersion:ts.ScriptTarget, onError?:(message:string) => void):ts.SourceFile {
            try {
                var text = readFileText(filename);
            }
            catch (e) {
                utils.log("error while read");
                if (onError) {
                    onError(e.message);
                }
                text = "";
            }
            return text !== undefined ? ts.createSourceFile(filename, text, languageVersion, /*version:*/ "0") : undefined;
        }

        function writeFile(fileName:string, data:string, writeByteOrderMark:boolean, onError?:(message:string) => void) {
            writeFileText(fileName, data);
        }

        return {
            getSourceFile: getSourceFile,
            getDefaultLibFilename: () =>  currentDir + "/lib.d.ts",
            writeFile: writeFile,
            getCurrentDirectory: () => currentDir,
            useCaseSensitiveFileNames: () => false,
            getCanonicalFileName: getCanonicalFileName,
            getNewLine: () => '\n'
        };
    }
}