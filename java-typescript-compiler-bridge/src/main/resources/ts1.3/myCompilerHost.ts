/// <reference path="typescriptServices.d.ts"/>


declare var Java;


module ts1 {

    var utils = Java.type("an.samples.utils.Util");

    /**
     *
     * DO NOT CHANGE *.JS FILE! THE FILE IS AUTOGENERATED
     *
     */

    var programCreated:ts.Program;
    var comilerHostCreated:ts.CompilerHost;

    function getCanonicalFileNameGlobal(fileName:string):string {
        return fileName.toLowerCase();
    }

    export function compileFile(path:string, baseDir:string) {
        var options = ts.getDefaultCompilerOptions();

        var arr = [];
        arr[0] = path;

        utils.log("before create");
        var createdHost = createCompilerHost(options, baseDir);
        utils.log("creatd Host");
        var program:ts.Program = ts.createProgram(arr, options, createdHost);
        var typeChecker = program.getTypeChecker(true);
        typeChecker.emitFiles();
        comilerHostCreated = createdHost;
        programCreated = program;

    }

    export function recompileFile(path:string) {

        var options = ts.getDefaultCompilerOptions();

        var arr = [];
        arr[0] = getCanonicalFileNameGlobal(path);

        var sources:{[index: string]: boolean} = {};
        sources[ getCanonicalFileNameGlobal(path)] = true;
        // Reuse source files from the last compilation so long as they weren't changed.
        function equalsExclude(file) {
            var result = !ts.hasProperty(sources, getCanonicalFileNameGlobal(file.filename));
            utils.log("check for exclude file " + file.filename + " check  " + result);
            return result;
        }

        var oldSourceFiles = ts.arrayToMap(
            ts.filter(programCreated.getSourceFiles(), file => equalsExclude(file)),
                file => getCanonicalFileNameGlobal(file.filename));

        // We create a new compiler host for this compilation cycle.
        // This new host is effectively the same except that 'getSourceFile'
        // will try to reuse the SourceFiles from the last compilation cycle
        // so long as they were not modified.
        var newCompilerHost = ts.clone(comilerHostCreated);
        newCompilerHost.getSourceFile = (fileName, languageVersion, onError) => {
            fileName = getCanonicalFileNameGlobal(fileName);

            var sourceFile = ts.lookUp(oldSourceFiles, fileName);
            if (sourceFile) {
                return sourceFile;
            }

            return comilerHostCreated.getSourceFile(fileName, languageVersion, onError);
        };

        var program:ts.Program = ts.createProgram(arr, options, newCompilerHost);
        var typeChecker = program.getTypeChecker(true);
        typeChecker.emitFiles();
        programCreated = program;

    }

    function readFileText(filename:string):string {
        return utils.readFileText(filename);
    }

    function writeFileText(fileName:string, data:string):void {
        utils.writeFile(fileName, data);
    }

    function createCompilerHost(options:ts.CompilerOptions, currentDir:string):ts.CompilerHost {

        function getCanonicalFileName(fileName:string):string {
            return getCanonicalFileNameGlobal(fileName);
        }

        function getSourceFile(filename:string, languageVersion:ts.ScriptTarget, onError?:(message:string) => void):ts.SourceFile {
            try {
                var text = readFileText(filename);
                utils.log("read file " + filename);
            }
            catch (e) {
                utils.log("error while read");
                if (onError) {
                    onError(e.message);
                }
                text = "";
            }
            return text !== undefined ? ts.createSourceFile(filename, text, languageVersion, /*version:*/ "0") : undefined;
        }

        function writeFile(fileName:string, data:string, writeByteOrderMark:boolean, onError?:(message:string) => void) {
            writeFileText(fileName, data);
            utils.log("write file " + fileName);
        }

        return {
            getSourceFile: getSourceFile,
            getDefaultLibFilename: () =>  currentDir + "/lib.d.ts",
            writeFile: writeFile,
            getCurrentDirectory: () => currentDir,
            useCaseSensitiveFileNames: () => false,
            getCanonicalFileName: getCanonicalFileName,
            getNewLine: () => '\n'
        };
    }
}

module aaa {
    export function doS() {};

}